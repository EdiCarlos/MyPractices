<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Untitled Page</title>

    <script type="text/javascript">
function getMonthInWords(index)
{
    var month=new Array(12);
month[0]="JAN";
month[1]="FEB";
month[2]="MAR";
month[3]="APR";
month[4]="MAY";
month[5]="JUN";
month[6]="JUL";
month[7]="AUG";
month[8]="SEP";
month[9]="OCT";
month[10]="NOV";
month[11]="DEC";

 return month[index];
 }
 
function getMonthInIndex(value)
{
    var month=new Array(12);
month[0]="JAN";
month[1]="FEB";
month[2]="MAR";
month[3]="APR";
month[4]="MAY";
month[5]="JUN";
month[6]="JUL";
month[7]="AUG";
month[8]="SEP";
month[9]="OCT";
month[10]="NOV";
month[11]="DEC";

var mnIndex;
for(var i =0; i < month.length;i++)
{
if(value == month[i])
{
mnIndex = i;
}
}

 return mnIndex;
 } 
 
    function init()
    {
    alert(thrMonth.options.length);
      for(var x = 0; x < thrMonth.options.length; x++)
      {
       alert(thrMonth[thrMonth.selectedIndex].text);
      }
      var curdt = new Date();
      var prvdt = new Date();
      var prvmn = new Date();
      prvdt.setFullYear(prvdt.getFullYear() - 2, prvdt.getMonth(), 1);
      populateCurrentYear();
      populatePreviousYear();
    
      for(var i = 0; i < thrMonth.length; i++)
      {
      if(thrMonth[i].text == getMonthInWords(curdt.getMonth())+"-"+curdt.getFullYear())
      {
      thrMonth.selectedIndex = i;
      }
      }
      
      populateCurrentYearFromdt();
      previousYearFromdt();
      
      prvmn.setMonth(prvmn.getMonth() - 3);
      for(var i = 0; i < frmMonth.length; i++)
      {
      if(frmMonth[i].text == getMonthInWords(prvmn.getMonth())+"-"+prvmn.getFullYear())
      { 
      frmMonth.selectedIndex = i;
      }
      }
             
    
    thrMonth.onchange = WhenChanged;
    }
    function WhenChanged()
    {
       var date = new Date();
       var year = thrMonth[thrMonth.selectedIndex].text.toString().substring(4, 9);
       var month = thrMonth[thrMonth.selectedIndex].text.toString().substring(0, 3);
     
       date.setFullYear(year, getMonthInIndex(month),1);
       ClearList();
       var tempdate = new Date();
       tempdate.setFullYear(year, getMonthInIndex(month), 1);
       var tempdate1 = new Date();
       tempdate1.setFullYear(year, getMonthInIndex(month), 1);
       
       onChangeFromdt(tempdate);
       onChangePrevFromdt(tempdate1);
       var datePrv = new Date();
      datePrv.setFullYear(parseInt(year), getMonthInIndex(month), 1);
      datePrv.setMonth(datePrv.getMonth() - 3);
      for(var i = 0; i < frmMonth.length; i++)
      {
//      alert(frmMonth[i].text + " = " + getMonthInWords(datePrv.getMonth())+"-"+datePrv.getFullYear().toString().substring(2, 4));
      if(frmMonth[i].text == getMonthInWords(datePrv.getMonth())+"-"+datePrv.getFullYear())
      {
      frmMonth.selectedIndex = i;
      }
      }
    }
    function ClearList()
    {
      var len = frmMonth.length;
      for(var i = 0; i < len;i++)
      {
      frmMonth.remove(0);
      }
      
    }
    function onChangeFromdt(dt)
    {

      for(var i = 0; i < dt.getMonth(); i++)
      {
   if(dt.getMonth() == 0)
   {
   break;
   }      
        frmMonth.add(new Option(getMonthInWords(i) + "-"+dt.getFullYear(), thrMonth.length));
      }
    }

    function onChangePrevFromdt(dt)
    {

       
      dt.setFullYear(dt.getFullYear() - 1, dt.getMonth(), 1);
       
       for(var i = dt.getMonth(); i <  12; i++)
   {
   
   frmMonth.add(new Option(getMonthInWords(i) + "-"+(dt.getFullYear()), thrMonth.length));
   }
                
    }
    
    function populateCurrentYearFromdt()
    {
        var curdt = new Date();
      for(var i = curdt.getMonth()+ 1; i > 0; i--)
      {
   if(curdt.getMonth() == 0)
   {
   break;
   }      
        frmMonth.add(new Option(getMonthInWords(i) + "-"+curdt.getFullYear(), thrMonth.length));
      }
    }
    function previousYearFromdt()
    {
        var curdt = new Date();
        var prvdt = new Date();
      prvdt.setFullYear(prvdt.getFullYear() - 1, prvdt.getMonth(), 1);
       
       for(var i = 11; i >= prvdt.getMonth(); i--)
   {
   
   frmMonth.add(new Option(getMonthInWords(i) + "-"+(prvdt.getFullYear()), thrMonth.length));
   }
                
    }
    function populatePreviousYear()
    {
      var curdt = new Date();
      var prvdt = new Date();
      
      prvdt.setFullYear(prvdt.getFullYear() - 2, prvdt.getMonth(), 1);
        
       for(var y = 0; y < 2; y++)
       { 
       if(y == 0)
       {
       for(var i = 0; i < 12; i++)
   {
   thrMonth.add(new Option(getMonthInWords(i) + "-"+(curdt.getFullYear()-1), thrMonth.length));
   }
       }
       else if(y == 1)
       {
          for(var i = curdt.getMonth(); i <  12; i++)
   {
   thrMonth.add(new Option(getMonthInWords(i) + "-"+(curdt.getFullYear()-2), thrMonth.length));
   }
       }
   
   }
    }
    function populateCurrentYear()
    {
    var curdt = new Date();
      for(var i = 0; i < curdt.getMonth() + 1; i++)
      {
        thrMonth.add(new Option(getMonthInWords(i) + "-"+curdt.getFullYear(), thrMonth.length));
      }
    }
   
    </script>

<!--<script type="text/javascript">

var fW = (typeof getFormWarpRequest == "function" ? getFormWarpRequest() : document.forms["formWarpRequest"]);

if ( !fW || fW == undefined)
{
fW = ( formWarpRequest_THIS_ ? formWarpRequest_THIS_ : formWarpRequest_NS_ );
}

//function which checks if user has Clicked on any of the option available in Custom Financial Status

var prompt = fW._oLstChoiceslistCustomFin;
var dt = fW._oLstChoicesdateType;
var docType = fW._oLstChoices_docType;
var reportlevel = fW._oLstChoices_reportLevel;
var analysis= fW._oLstChoices_analysis1;



function displayBlock(name)
{
document.getElementById(name).style.display='block';
}

function hideBlock(name)
{
document.getElementById(name).style.display='none';
}

// function added to show or hide the sum count radio button

reportlevel.onchange = Displaysumcount;

// function added to show or hide the sum count radio button

function Displaysumcount () 
{ 
if (reportlevel.selectedIndex == 2 )
{
displayBlock("showcount"); 
displayBlock("showcountlabel"); 
}
else
{
hideBlock("showcount");
hideBlock("showcountlabel");
}
if(reportlevel.selectedIndex == 3)
{
analysis[2].disabled = true;
analysis[2].checked = false;
hideBlock("desiredanalysBlock");
}
else
{
analysis[2].disabled = false;
}
}

//if exists function check if value in combo box exists
function ifExists(cmb,val)
   {
   try{
    for(var x = 0; x < cmb.length; x++)
    {
        if(cmb.options[x].value.toString().toUpperCase() == val.toString().toUpperCase())
        {
        return true;
        }  
    }
    }
    catch(err)
    {
    var mess = "Error in function ifExists. \r\n";
    mess += "Error Description : " + err.description;
    alert(mess);
    }
    return false;
}

//add list of arrays in a combo box
function AddList(cmb, list)
    {
    try
    {
     for(var x = 0; x < list.length; x++)
     {
     var ele = new Option(list[x][0], list[x][1]);
     if(!ifExists(cmb, list[x][1]))
     {
       cmb.add(ele, cmb.length);
     }
     }
    }
    catch(err)
    {
    var mess = "Error in function AddList ";
    mess += "Error Description : " + err.description;
    alert(mess);
    }
    }


//Clears the combox
    function ClearCombo(cmb)
    {
    try
    {

      if(cmb.length > 2)
      {
      var tempLen = cmb.length;
         for(var x = 2; x < tempLen; x++)
         {
         cmb.remove(2);
         }
      }
      }
      catch(err)
      {
      var mess = "Error in function ClearCombo";
      mess += "Error Description : " + err.description;
      alert(mess);
      }
    }    

function SetDefault(cmb, val)
{
 for(var x = 0; x < cmb.length; x++)
{
if(cmb[x].value.toString() == val.toString())
{
cmb.selectedIndex = x;
}
}
}

//function SetFinancial()
//{
//for(var x =0; x < prompt.length; x++)
//{
//
//if(prompt[x].value != 'DU' && prompt[x].value != 'CA')
//{
//prompt[x].checked = true;
//}
//}
//}
</script>-->


</head>
<body onload="init()">
    <select id="frmMonth">
        <option></option>
    </select>
    <select id="thrMonth">
        <option></option>
    </select>
</body>
</html>
