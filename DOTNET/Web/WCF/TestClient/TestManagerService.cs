//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestManagerslib.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CTestManager", Namespace="http://schemas.datacontract.org/2004/07/TestManagerslib.Contract")]
    public partial class CTestManager : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DescriptionField;
        
        private System.Nullable<int> DurationField;
        
        private System.Nullable<int> GradeIDField;
        
        private string NameField;
        
        private System.Nullable<int> NumberOfQuestionsField;
        
        private System.Nullable<int> PassingMarksField;
        
        private System.Nullable<decimal> PercentField;
        
        private int TestIdField;
        
        private System.Nullable<int> TotalMarksField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Duration
        {
            get
            {
                return this.DurationField;
            }
            set
            {
                this.DurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> GradeID
        {
            get
            {
                return this.GradeIDField;
            }
            set
            {
                this.GradeIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> NumberOfQuestions
        {
            get
            {
                return this.NumberOfQuestionsField;
            }
            set
            {
                this.NumberOfQuestionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PassingMarks
        {
            get
            {
                return this.PassingMarksField;
            }
            set
            {
                this.PassingMarksField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Percent
        {
            get
            {
                return this.PercentField;
            }
            set
            {
                this.PercentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestId
        {
            get
            {
                return this.TestIdField;
            }
            set
            {
                this.TestIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TotalMarks
        {
            get
            {
                return this.TotalMarksField;
            }
            set
            {
                this.TotalMarksField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITestManagerService")]
public interface ITestManagerService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagerService/GetTest", ReplyAction="http://tempuri.org/ITestManagerService/GetTestResponse")]
    TestManagerslib.Contract.CTestManager GetTest(int TestID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagerService/GetTest", ReplyAction="http://tempuri.org/ITestManagerService/GetTestResponse")]
    System.Threading.Tasks.Task<TestManagerslib.Contract.CTestManager> GetTestAsync(int TestID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagerService/GetTests", ReplyAction="http://tempuri.org/ITestManagerService/GetTestsResponse")]
    TestManagerslib.Contract.CTestManager[] GetTests(int[] TestIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagerService/GetTests", ReplyAction="http://tempuri.org/ITestManagerService/GetTestsResponse")]
    System.Threading.Tasks.Task<TestManagerslib.Contract.CTestManager[]> GetTestsAsync(int[] TestIds);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITestManagerService/InsertTest")]
    void InsertTest(TestManagerslib.Contract.CTestManager manager);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITestManagerService/InsertTest")]
    System.Threading.Tasks.Task InsertTestAsync(TestManagerslib.Contract.CTestManager manager);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagerService/GetClaims", ReplyAction="http://tempuri.org/ITestManagerService/GetClaimsResponse")]
    string[] GetClaims();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestManagerService/GetClaims", ReplyAction="http://tempuri.org/ITestManagerService/GetClaimsResponse")]
    System.Threading.Tasks.Task<string[]> GetClaimsAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITestManagerServiceChannel : ITestManagerService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestManagerServiceClient : System.ServiceModel.ClientBase<ITestManagerService>, ITestManagerService
{
    
    public TestManagerServiceClient()
    {
    }
    
    public TestManagerServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TestManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TestManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TestManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public TestManagerslib.Contract.CTestManager GetTest(int TestID)
    {
        return base.Channel.GetTest(TestID);
    }
    
    public System.Threading.Tasks.Task<TestManagerslib.Contract.CTestManager> GetTestAsync(int TestID)
    {
        return base.Channel.GetTestAsync(TestID);
    }
    
    public TestManagerslib.Contract.CTestManager[] GetTests(int[] TestIds)
    {
        return base.Channel.GetTests(TestIds);
    }
    
    public System.Threading.Tasks.Task<TestManagerslib.Contract.CTestManager[]> GetTestsAsync(int[] TestIds)
    {
        return base.Channel.GetTestsAsync(TestIds);
    }
    
    public void InsertTest(TestManagerslib.Contract.CTestManager manager)
    {
        base.Channel.InsertTest(manager);
    }
    
    public System.Threading.Tasks.Task InsertTestAsync(TestManagerslib.Contract.CTestManager manager)
    {
        return base.Channel.InsertTestAsync(manager);
    }
    
    public string[] GetClaims()
    {
        return base.Channel.GetClaims();
    }
    
    public System.Threading.Tasks.Task<string[]> GetClaimsAsync()
    {
        return base.Channel.GetClaimsAsync();
    }
}
