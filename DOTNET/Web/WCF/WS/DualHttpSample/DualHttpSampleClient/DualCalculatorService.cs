//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="https://mysample/duplex", ConfigurationName="IDualCalculatorService", CallbackContract=typeof(IDualCalculatorServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IDualCalculatorService
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/Clear")]
    void Clear();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/Clear")]
    System.Threading.Tasks.Task ClearAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/AddTo")]
    void AddTo(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/AddTo")]
    System.Threading.Tasks.Task AddToAsync(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/SubtractFrom")]
    void SubtractFrom(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/SubtractFrom")]
    System.Threading.Tasks.Task SubtractFromAsync(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/MultiplyBy")]
    void MultiplyBy(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/MultiplyBy")]
    System.Threading.Tasks.Task MultiplyByAsync(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/DivideBy")]
    void DivideBy(double n1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="https://mysample/duplex/IDualCalculatorService/DivideBy")]
    System.Threading.Tasks.Task DivideByAsync(double n1);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDualCalculatorServiceCallback
{
    
    [System.ServiceModel.OperationContractAttribute(Action="https://mysample/duplex/IDualCalculatorService/Result", ReplyAction="https://mysample/duplex/IDualCalculatorService/ResultResponse")]
    void Result([System.ServiceModel.MessageParameterAttribute(Name="result")] double result1);
    
    [System.ServiceModel.OperationContractAttribute(Action="https://mysample/duplex/IDualCalculatorService/Equation", ReplyAction="https://mysample/duplex/IDualCalculatorService/EquationResponse")]
    void Equation(string eqn);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDualCalculatorServiceChannel : IDualCalculatorService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DualCalculatorServiceClient : System.ServiceModel.DuplexClientBase<IDualCalculatorService>, IDualCalculatorService
{
    
    public DualCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public DualCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public DualCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public DualCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public DualCalculatorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public void Clear()
    {
        base.Channel.Clear();
    }
    
    public System.Threading.Tasks.Task ClearAsync()
    {
        return base.Channel.ClearAsync();
    }
    
    public void AddTo(double n1)
    {
        base.Channel.AddTo(n1);
    }
    
    public System.Threading.Tasks.Task AddToAsync(double n1)
    {
        return base.Channel.AddToAsync(n1);
    }
    
    public void SubtractFrom(double n1)
    {
        base.Channel.SubtractFrom(n1);
    }
    
    public System.Threading.Tasks.Task SubtractFromAsync(double n1)
    {
        return base.Channel.SubtractFromAsync(n1);
    }
    
    public void MultiplyBy(double n1)
    {
        base.Channel.MultiplyBy(n1);
    }
    
    public System.Threading.Tasks.Task MultiplyByAsync(double n1)
    {
        return base.Channel.MultiplyByAsync(n1);
    }
    
    public void DivideBy(double n1)
    {
        base.Channel.DivideBy(n1);
    }
    
    public System.Threading.Tasks.Task DivideByAsync(double n1)
    {
        return base.Channel.DivideByAsync(n1);
    }
}
