//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestManagerslib.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TestManagerDBContainer : DbContext
    {
        public TestManagerDBContainer()
            : base("name=TestManagerDBContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<TestManager> TestManagers { get; set; }
    
        public virtual int InsertTestManager(string testName, string description, Nullable<int> numberOfQuestion, Nullable<decimal> passPercentage, Nullable<int> totalMarks, Nullable<int> gradeId, Nullable<int> testDuration, Nullable<int> passMark)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("testName", testName) :
                new ObjectParameter("testName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var numberOfQuestionParameter = numberOfQuestion.HasValue ?
                new ObjectParameter("numberOfQuestion", numberOfQuestion) :
                new ObjectParameter("numberOfQuestion", typeof(int));
    
            var passPercentageParameter = passPercentage.HasValue ?
                new ObjectParameter("passPercentage", passPercentage) :
                new ObjectParameter("passPercentage", typeof(decimal));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(int));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("gradeId", gradeId) :
                new ObjectParameter("gradeId", typeof(int));
    
            var testDurationParameter = testDuration.HasValue ?
                new ObjectParameter("testDuration", testDuration) :
                new ObjectParameter("testDuration", typeof(int));
    
            var passMarkParameter = passMark.HasValue ?
                new ObjectParameter("passMark", passMark) :
                new ObjectParameter("passMark", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTestManager", testNameParameter, descriptionParameter, numberOfQuestionParameter, passPercentageParameter, totalMarksParameter, gradeIdParameter, testDurationParameter, passMarkParameter);
        }
    }
}
