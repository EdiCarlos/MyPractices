<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnAddGroupResource1.Text" xml:space="preserve">
    <value>Add Group</value>
  </data>
  <data name="btnCancelResource1.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnNewSubmitResource1.Text" xml:space="preserve">
    <value>Save Group</value>
  </data>
  <data name="btnResetADxmlResource1.Text" xml:space="preserve">
    <value>Refresh AD</value>
  </data>
  <data name="gvADGroupsResource1.EmptyDataText" xml:space="preserve">
    <value>No one has any access!</value>
  </data>
  <data name="lbUpdateResource1.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="LinkButton1Resource1.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="LinkButton2Resource1.Text" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="litAccessLevelResource1.Text" xml:space="preserve">
    <value>Access Level</value>
  </data>
  <data name="litADGroupResource1.Text" xml:space="preserve">
    <value>AD Group</value>
  </data>
  <data name="litDescriptionResource1.Text" xml:space="preserve">
    <value>Here you can set what access levels your active directory groups will have for write permissions; highest level of access takes precedence.</value>
  </data>
  <data name="rfvDisplayResource1.ErrorMessage" xml:space="preserve">
    <value>Group Required</value>
  </data>
  <data name="rfvEditDisplayResource1.ErrorMessage" xml:space="preserve">
    <value>AD Group Required</value>
  </data>
  <data name="TemplateFieldResource2.HeaderText" xml:space="preserve">
    <value>AD Group &lt;a href='javascript:void();' class='tooltip limited'&gt;&lt;img src='../images/info.png' alt='explanation' /&gt;&lt;span class='border_color'&gt;&lt;q class='inner_color base_text'&gt;The Active Directory Group that will be associated with an access level in this system.&lt;/q&gt;&lt;/span&gt;&lt;/a&gt;</value>
    <comment>be careful to not edit the markup in this</comment>
  </data>
  <data name="TemplateFieldResource3.HeaderText" xml:space="preserve">
    <value>Access Level &lt;a href='javascript:void();' class='tooltip limited'&gt;&lt;img src='../images/info.png' alt='explanation' /&gt;&lt;span class='border_color'&gt;&lt;q class='inner_color base_text'&gt;The access level users in this AD Group will have.&lt;/q&gt;&lt;/span&gt;&lt;/a&gt;</value>
    <comment>be careful to not edit the markup in this</comment>
  </data>
  <data name="ADRefreshError" xml:space="preserve">
    <value>Error refreshing the AD group xml file; this often has to be done from the web server itself and by an administrator with domain rights</value>
  </data>
  <data name="btnResetADxmlResource1.OnClientClick" xml:space="preserve">
    <value>return confirm('Depending on your network settings, this often is required to be run from the web server and with an elevated account as it needs access to Active Directory; proceed?')</value>
  </data>
  <data name="LinkButton2Resource1.OnClientClick" xml:space="preserve">
    <value>return confirm('Are you sure you want to remove this group?');</value>
  </data>
  <data name="litADAssociatedResource1.Text" xml:space="preserve">
    <value>The Active Directory Group that will be associated with an access level in this system.</value>
  </data>
</root>