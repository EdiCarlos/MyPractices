#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="SlickTicket")]
public partial class dbDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertallowed_email_domain(allowed_email_domain instance);
  partial void Updateallowed_email_domain(allowed_email_domain instance);
  partial void Deleteallowed_email_domain(allowed_email_domain instance);
  partial void Insertuser(user instance);
  partial void Updateuser(user instance);
  partial void Deleteuser(user instance);
  partial void Insertfaq(faq instance);
  partial void Updatefaq(faq instance);
  partial void Deletefaq(faq instance);
  partial void Insertpriority(priority instance);
  partial void Updatepriority(priority instance);
  partial void Deletepriority(priority instance);
  partial void Insertsecurity_level(security_level instance);
  partial void Updatesecurity_level(security_level instance);
  partial void Deletesecurity_level(security_level instance);
  partial void Insertstatuse(statuse instance);
  partial void Updatestatuse(statuse instance);
  partial void Deletestatuse(statuse instance);
  partial void Insertstyle(style instance);
  partial void Updatestyle(style instance);
  partial void Deletestyle(style instance);
  partial void Insertsub_unit(sub_unit instance);
  partial void Updatesub_unit(sub_unit instance);
  partial void Deletesub_unit(sub_unit instance);
  partial void Insertunit(unit instance);
  partial void Updateunit(unit instance);
  partial void Deleteunit(unit instance);
  partial void Insertuser_group(user_group instance);
  partial void Updateuser_group(user_group instance);
  partial void Deleteuser_group(user_group instance);
  partial void Insertticket(ticket instance);
  partial void Updateticket(ticket instance);
  partial void Deleteticket(ticket instance);
  partial void Insertcomment(comment instance);
  partial void Updatecomment(comment instance);
  partial void Deletecomment(comment instance);
  partial void Insertattachment(attachment instance);
  partial void Updateattachment(attachment instance);
  partial void Deleteattachment(attachment instance);
  #endregion
	
	public dbDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SlickTicket"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<allowed_email_domain> allowed_email_domains
	{
		get
		{
			return this.GetTable<allowed_email_domain>();
		}
	}
	
	public System.Data.Linq.Table<user> users
	{
		get
		{
			return this.GetTable<user>();
		}
	}
	
	public System.Data.Linq.Table<faq> faqs
	{
		get
		{
			return this.GetTable<faq>();
		}
	}
	
	public System.Data.Linq.Table<priority> priorities
	{
		get
		{
			return this.GetTable<priority>();
		}
	}
	
	public System.Data.Linq.Table<security_level> security_levels
	{
		get
		{
			return this.GetTable<security_level>();
		}
	}
	
	public System.Data.Linq.Table<statuse> statuses
	{
		get
		{
			return this.GetTable<statuse>();
		}
	}
	
	public System.Data.Linq.Table<style> styles
	{
		get
		{
			return this.GetTable<style>();
		}
	}
	
	public System.Data.Linq.Table<sub_unit> sub_units
	{
		get
		{
			return this.GetTable<sub_unit>();
		}
	}
	
	public System.Data.Linq.Table<unit> units
	{
		get
		{
			return this.GetTable<unit>();
		}
	}
	
	public System.Data.Linq.Table<user_group> user_groups
	{
		get
		{
			return this.GetTable<user_group>();
		}
	}
	
	public System.Data.Linq.Table<ticket> tickets
	{
		get
		{
			return this.GetTable<ticket>();
		}
	}
	
	public System.Data.Linq.Table<comment> comments
	{
		get
		{
			return this.GetTable<comment>();
		}
	}
	
	public System.Data.Linq.Table<attachment> attachments
	{
		get
		{
			return this.GetTable<attachment>();
		}
	}
}

[Table(Name="dbo.allowed_email_domains")]
public partial class allowed_email_domain : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _domain;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndomainChanging(string value);
    partial void OndomainChanged();
    #endregion
	
	public allowed_email_domain()
	{
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_domain", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string domain
	{
		get
		{
			return this._domain;
		}
		set
		{
			if ((this._domain != value))
			{
				this.OndomainChanging(value);
				this.SendPropertyChanging();
				this._domain = value;
				this.SendPropertyChanged("domain");
				this.OndomainChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.users")]
public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _userName;
	
	private string _phone;
	
	private string _email;
	
	private int _sub_unit;
	
	private bool _is_admin;
	
	private EntitySet<ticket> _tickets;
	
	private EntitySet<comment> _comments;
	
	private EntityRef<sub_unit> _sub_unit1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onsub_unitChanging(int value);
    partial void Onsub_unitChanged();
    partial void Onis_adminChanging(bool value);
    partial void Onis_adminChanged();
    #endregion
	
	public user()
	{
		this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
		this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
		this._sub_unit1 = default(EntityRef<sub_unit>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_userName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string userName
	{
		get
		{
			return this._userName;
		}
		set
		{
			if ((this._userName != value))
			{
				this.OnuserNameChanging(value);
				this.SendPropertyChanging();
				this._userName = value;
				this.SendPropertyChanged("userName");
				this.OnuserNameChanged();
			}
		}
	}
	
	[Column(Storage="_phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string phone
	{
		get
		{
			return this._phone;
		}
		set
		{
			if ((this._phone != value))
			{
				this.OnphoneChanging(value);
				this.SendPropertyChanging();
				this._phone = value;
				this.SendPropertyChanged("phone");
				this.OnphoneChanged();
			}
		}
	}
	
	[Column(Storage="_email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[Column(Storage="_sub_unit", DbType="Int NOT NULL")]
	public int sub_unit
	{
		get
		{
			return this._sub_unit;
		}
		set
		{
			if ((this._sub_unit != value))
			{
				if (this._sub_unit1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onsub_unitChanging(value);
				this.SendPropertyChanging();
				this._sub_unit = value;
				this.SendPropertyChanged("sub_unit");
				this.Onsub_unitChanged();
			}
		}
	}
	
	[Column(Storage="_is_admin", DbType="Bit NOT NULL")]
	public bool is_admin
	{
		get
		{
			return this._is_admin;
		}
		set
		{
			if ((this._is_admin != value))
			{
				this.Onis_adminChanging(value);
				this.SendPropertyChanging();
				this._is_admin = value;
				this.SendPropertyChanged("is_admin");
				this.Onis_adminChanged();
			}
		}
	}
	
	[Association(Name="user_ticket", Storage="_tickets", ThisKey="id", OtherKey="submitter")]
	public EntitySet<ticket> tickets
	{
		get
		{
			return this._tickets;
		}
		set
		{
			this._tickets.Assign(value);
		}
	}
	
	[Association(Name="user_comment", Storage="_comments", ThisKey="id", OtherKey="submitter")]
	public EntitySet<comment> comments
	{
		get
		{
			return this._comments;
		}
		set
		{
			this._comments.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_user", Storage="_sub_unit1", ThisKey="sub_unit", OtherKey="id", IsForeignKey=true)]
	public sub_unit sub_unit1
	{
		get
		{
			return this._sub_unit1.Entity;
		}
		set
		{
			sub_unit previousValue = this._sub_unit1.Entity;
			if (((previousValue != value) 
						|| (this._sub_unit1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._sub_unit1.Entity = null;
					previousValue.users.Remove(this);
				}
				this._sub_unit1.Entity = value;
				if ((value != null))
				{
					value.users.Add(this);
					this._sub_unit = value.id;
				}
				else
				{
					this._sub_unit = default(int);
				}
				this.SendPropertyChanged("sub_unit1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.user = this;
	}
	
	private void detach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.user = null;
	}
	
	private void attach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.user = this;
	}
	
	private void detach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.user = null;
	}
}

[Table(Name="dbo.faq")]
public partial class faq : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _title;
	
	private string _body;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    #endregion
	
	public faq()
	{
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string body
	{
		get
		{
			return this._body;
		}
		set
		{
			if ((this._body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.priority")]
public partial class priority : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _priority_name;
	
	private int _level;
	
	private EntitySet<ticket> _tickets;
	
	private EntitySet<comment> _comments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onpriority_nameChanging(string value);
    partial void Onpriority_nameChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    #endregion
	
	public priority()
	{
		this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
		this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_priority_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string priority_name
	{
		get
		{
			return this._priority_name;
		}
		set
		{
			if ((this._priority_name != value))
			{
				this.Onpriority_nameChanging(value);
				this.SendPropertyChanging();
				this._priority_name = value;
				this.SendPropertyChanged("priority_name");
				this.Onpriority_nameChanged();
			}
		}
	}
	
	[Column(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
	public int level
	{
		get
		{
			return this._level;
		}
		set
		{
			if ((this._level != value))
			{
				this.OnlevelChanging(value);
				this.SendPropertyChanging();
				this._level = value;
				this.SendPropertyChanged("level");
				this.OnlevelChanged();
			}
		}
	}
	
	[Association(Name="priority_ticket", Storage="_tickets", ThisKey="id", OtherKey="priority")]
	public EntitySet<ticket> tickets
	{
		get
		{
			return this._tickets;
		}
		set
		{
			this._tickets.Assign(value);
		}
	}
	
	[Association(Name="priority_comment", Storage="_comments", ThisKey="id", OtherKey="priority_id")]
	public EntitySet<comment> comments
	{
		get
		{
			return this._comments;
		}
		set
		{
			this._comments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.priority1 = this;
	}
	
	private void detach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.priority1 = null;
	}
	
	private void attach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.priority = this;
	}
	
	private void detach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.priority = null;
	}
}

[Table(Name="dbo.security_levels")]
public partial class security_level : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _security_level_name;
	
	private string _security_level_description;
	
	private EntitySet<sub_unit> _sub_units;
	
	private EntitySet<user_group> _user_groups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsecurity_level_nameChanging(string value);
    partial void Onsecurity_level_nameChanged();
    partial void Onsecurity_level_descriptionChanging(string value);
    partial void Onsecurity_level_descriptionChanged();
    #endregion
	
	public security_level()
	{
		this._sub_units = new EntitySet<sub_unit>(new Action<sub_unit>(this.attach_sub_units), new Action<sub_unit>(this.detach_sub_units));
		this._user_groups = new EntitySet<user_group>(new Action<user_group>(this.attach_user_groups), new Action<user_group>(this.detach_user_groups));
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_security_level_name", DbType="VarChar(50)")]
	public string security_level_name
	{
		get
		{
			return this._security_level_name;
		}
		set
		{
			if ((this._security_level_name != value))
			{
				this.Onsecurity_level_nameChanging(value);
				this.SendPropertyChanging();
				this._security_level_name = value;
				this.SendPropertyChanged("security_level_name");
				this.Onsecurity_level_nameChanged();
			}
		}
	}
	
	[Column(Storage="_security_level_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string security_level_description
	{
		get
		{
			return this._security_level_description;
		}
		set
		{
			if ((this._security_level_description != value))
			{
				this.Onsecurity_level_descriptionChanging(value);
				this.SendPropertyChanging();
				this._security_level_description = value;
				this.SendPropertyChanged("security_level_description");
				this.Onsecurity_level_descriptionChanged();
			}
		}
	}
	
	[Association(Name="security_level_sub_unit", Storage="_sub_units", ThisKey="id", OtherKey="access_level")]
	public EntitySet<sub_unit> sub_units
	{
		get
		{
			return this._sub_units;
		}
		set
		{
			this._sub_units.Assign(value);
		}
	}
	
	[Association(Name="security_level_user_group", Storage="_user_groups", ThisKey="id", OtherKey="security_level")]
	public EntitySet<user_group> user_groups
	{
		get
		{
			return this._user_groups;
		}
		set
		{
			this._user_groups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_sub_units(sub_unit entity)
	{
		this.SendPropertyChanging();
		entity.security_level = this;
	}
	
	private void detach_sub_units(sub_unit entity)
	{
		this.SendPropertyChanging();
		entity.security_level = null;
	}
	
	private void attach_user_groups(user_group entity)
	{
		this.SendPropertyChanging();
		entity.security_level1 = this;
	}
	
	private void detach_user_groups(user_group entity)
	{
		this.SendPropertyChanging();
		entity.security_level1 = null;
	}
}

[Table(Name="dbo.statuses")]
public partial class statuse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _status_order;
	
	private string _status_name;
	
	private EntitySet<ticket> _tickets;
	
	private EntitySet<comment> _comments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstatus_orderChanging(int value);
    partial void Onstatus_orderChanged();
    partial void Onstatus_nameChanging(string value);
    partial void Onstatus_nameChanged();
    #endregion
	
	public statuse()
	{
		this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
		this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_status_order", DbType="Int NOT NULL")]
	public int status_order
	{
		get
		{
			return this._status_order;
		}
		set
		{
			if ((this._status_order != value))
			{
				this.Onstatus_orderChanging(value);
				this.SendPropertyChanging();
				this._status_order = value;
				this.SendPropertyChanged("status_order");
				this.Onstatus_orderChanged();
			}
		}
	}
	
	[Column(Storage="_status_name", DbType="VarChar(50)")]
	public string status_name
	{
		get
		{
			return this._status_name;
		}
		set
		{
			if ((this._status_name != value))
			{
				this.Onstatus_nameChanging(value);
				this.SendPropertyChanging();
				this._status_name = value;
				this.SendPropertyChanged("status_name");
				this.Onstatus_nameChanged();
			}
		}
	}
	
	[Association(Name="statuse_ticket", Storage="_tickets", ThisKey="id", OtherKey="ticket_status")]
	public EntitySet<ticket> tickets
	{
		get
		{
			return this._tickets;
		}
		set
		{
			this._tickets.Assign(value);
		}
	}
	
	[Association(Name="statuse_comment", Storage="_comments", ThisKey="id", OtherKey="status_id")]
	public EntitySet<comment> comments
	{
		get
		{
			return this._comments;
		}
		set
		{
			this._comments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.statuse = this;
	}
	
	private void detach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.statuse = null;
	}
	
	private void attach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.statuse = this;
	}
	
	private void detach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.statuse = null;
	}
}

[Table(Name="dbo.styles")]
public partial class style : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _style_name;
	
	private string _text_color;
	
	private string _borders;
	
	private string _body;
	
	private string _links;
	
	private string _hover;
	
	private string _button_text;
	
	private string _header;
	
	private string _alt_rows;
	
	private string _background;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstyle_nameChanging(string value);
    partial void Onstyle_nameChanged();
    partial void Ontext_colorChanging(string value);
    partial void Ontext_colorChanged();
    partial void OnbordersChanging(string value);
    partial void OnbordersChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnlinksChanging(string value);
    partial void OnlinksChanged();
    partial void OnhoverChanging(string value);
    partial void OnhoverChanged();
    partial void Onbutton_textChanging(string value);
    partial void Onbutton_textChanged();
    partial void OnheaderChanging(string value);
    partial void OnheaderChanged();
    partial void Onalt_rowsChanging(string value);
    partial void Onalt_rowsChanged();
    partial void OnbackgroundChanging(string value);
    partial void OnbackgroundChanged();
    #endregion
	
	public style()
	{
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_style_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string style_name
	{
		get
		{
			return this._style_name;
		}
		set
		{
			if ((this._style_name != value))
			{
				this.Onstyle_nameChanging(value);
				this.SendPropertyChanging();
				this._style_name = value;
				this.SendPropertyChanged("style_name");
				this.Onstyle_nameChanged();
			}
		}
	}
	
	[Column(Storage="_text_color", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string text_color
	{
		get
		{
			return this._text_color;
		}
		set
		{
			if ((this._text_color != value))
			{
				this.Ontext_colorChanging(value);
				this.SendPropertyChanging();
				this._text_color = value;
				this.SendPropertyChanged("text_color");
				this.Ontext_colorChanged();
			}
		}
	}
	
	[Column(Storage="_borders", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string borders
	{
		get
		{
			return this._borders;
		}
		set
		{
			if ((this._borders != value))
			{
				this.OnbordersChanging(value);
				this.SendPropertyChanging();
				this._borders = value;
				this.SendPropertyChanged("borders");
				this.OnbordersChanged();
			}
		}
	}
	
	[Column(Storage="_body", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string body
	{
		get
		{
			return this._body;
		}
		set
		{
			if ((this._body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	[Column(Storage="_links", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string links
	{
		get
		{
			return this._links;
		}
		set
		{
			if ((this._links != value))
			{
				this.OnlinksChanging(value);
				this.SendPropertyChanging();
				this._links = value;
				this.SendPropertyChanged("links");
				this.OnlinksChanged();
			}
		}
	}
	
	[Column(Storage="_hover", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string hover
	{
		get
		{
			return this._hover;
		}
		set
		{
			if ((this._hover != value))
			{
				this.OnhoverChanging(value);
				this.SendPropertyChanging();
				this._hover = value;
				this.SendPropertyChanged("hover");
				this.OnhoverChanged();
			}
		}
	}
	
	[Column(Storage="_button_text", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string button_text
	{
		get
		{
			return this._button_text;
		}
		set
		{
			if ((this._button_text != value))
			{
				this.Onbutton_textChanging(value);
				this.SendPropertyChanging();
				this._button_text = value;
				this.SendPropertyChanged("button_text");
				this.Onbutton_textChanged();
			}
		}
	}
	
	[Column(Storage="_header", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string header
	{
		get
		{
			return this._header;
		}
		set
		{
			if ((this._header != value))
			{
				this.OnheaderChanging(value);
				this.SendPropertyChanging();
				this._header = value;
				this.SendPropertyChanged("header");
				this.OnheaderChanged();
			}
		}
	}
	
	[Column(Storage="_alt_rows", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string alt_rows
	{
		get
		{
			return this._alt_rows;
		}
		set
		{
			if ((this._alt_rows != value))
			{
				this.Onalt_rowsChanging(value);
				this.SendPropertyChanging();
				this._alt_rows = value;
				this.SendPropertyChanged("alt_rows");
				this.Onalt_rowsChanged();
			}
		}
	}
	
	[Column(Storage="_background", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string background
	{
		get
		{
			return this._background;
		}
		set
		{
			if ((this._background != value))
			{
				this.OnbackgroundChanging(value);
				this.SendPropertyChanging();
				this._background = value;
				this.SendPropertyChanged("background");
				this.OnbackgroundChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.sub_units")]
public partial class sub_unit : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _unit_ref;
	
	private string _sub_unit_name;
	
	private int _access_level;
	
	private string _mailto;
	
	private EntitySet<user> _users;
	
	private EntitySet<ticket> _tickets;
	
	private EntitySet<ticket> _tickets1;
	
	private EntitySet<ticket> _tickets2;
	
	private EntitySet<comment> _comments;
	
	private EntityRef<security_level> _security_level;
	
	private EntityRef<unit> _unit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onunit_refChanging(int value);
    partial void Onunit_refChanged();
    partial void Onsub_unit_nameChanging(string value);
    partial void Onsub_unit_nameChanged();
    partial void Onaccess_levelChanging(int value);
    partial void Onaccess_levelChanged();
    partial void OnmailtoChanging(string value);
    partial void OnmailtoChanged();
    #endregion
	
	public sub_unit()
	{
		this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
		this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
		this._tickets1 = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets1), new Action<ticket>(this.detach_tickets1));
		this._tickets2 = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets2), new Action<ticket>(this.detach_tickets2));
		this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
		this._security_level = default(EntityRef<security_level>);
		this._unit = default(EntityRef<unit>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_unit_ref", DbType="Int NOT NULL")]
	public int unit_ref
	{
		get
		{
			return this._unit_ref;
		}
		set
		{
			if ((this._unit_ref != value))
			{
				if (this._unit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onunit_refChanging(value);
				this.SendPropertyChanging();
				this._unit_ref = value;
				this.SendPropertyChanged("unit_ref");
				this.Onunit_refChanged();
			}
		}
	}
	
	[Column(Storage="_sub_unit_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string sub_unit_name
	{
		get
		{
			return this._sub_unit_name;
		}
		set
		{
			if ((this._sub_unit_name != value))
			{
				this.Onsub_unit_nameChanging(value);
				this.SendPropertyChanging();
				this._sub_unit_name = value;
				this.SendPropertyChanged("sub_unit_name");
				this.Onsub_unit_nameChanged();
			}
		}
	}
	
	[Column(Storage="_access_level", DbType="Int NOT NULL")]
	public int access_level
	{
		get
		{
			return this._access_level;
		}
		set
		{
			if ((this._access_level != value))
			{
				if (this._security_level.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onaccess_levelChanging(value);
				this.SendPropertyChanging();
				this._access_level = value;
				this.SendPropertyChanged("access_level");
				this.Onaccess_levelChanged();
			}
		}
	}
	
	[Column(Storage="_mailto", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string mailto
	{
		get
		{
			return this._mailto;
		}
		set
		{
			if ((this._mailto != value))
			{
				this.OnmailtoChanging(value);
				this.SendPropertyChanging();
				this._mailto = value;
				this.SendPropertyChanged("mailto");
				this.OnmailtoChanged();
			}
		}
	}
	
	[Association(Name="sub_unit_user", Storage="_users", ThisKey="id", OtherKey="sub_unit")]
	public EntitySet<user> users
	{
		get
		{
			return this._users;
		}
		set
		{
			this._users.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_ticket", Storage="_tickets", ThisKey="id", OtherKey="assigned_to_group")]
	public EntitySet<ticket> tickets
	{
		get
		{
			return this._tickets;
		}
		set
		{
			this._tickets.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_ticket1", Storage="_tickets1", ThisKey="id", OtherKey="assigned_to_group_last")]
	public EntitySet<ticket> tickets1
	{
		get
		{
			return this._tickets1;
		}
		set
		{
			this._tickets1.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_ticket2", Storage="_tickets2", ThisKey="id", OtherKey="originating_group")]
	public EntitySet<ticket> tickets2
	{
		get
		{
			return this._tickets2;
		}
		set
		{
			this._tickets2.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_comment", Storage="_comments", ThisKey="id", OtherKey="assigned_to")]
	public EntitySet<comment> comments
	{
		get
		{
			return this._comments;
		}
		set
		{
			this._comments.Assign(value);
		}
	}
	
	[Association(Name="security_level_sub_unit", Storage="_security_level", ThisKey="access_level", OtherKey="id", IsForeignKey=true)]
	public security_level security_level
	{
		get
		{
			return this._security_level.Entity;
		}
		set
		{
			security_level previousValue = this._security_level.Entity;
			if (((previousValue != value) 
						|| (this._security_level.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._security_level.Entity = null;
					previousValue.sub_units.Remove(this);
				}
				this._security_level.Entity = value;
				if ((value != null))
				{
					value.sub_units.Add(this);
					this._access_level = value.id;
				}
				else
				{
					this._access_level = default(int);
				}
				this.SendPropertyChanged("security_level");
			}
		}
	}
	
	[Association(Name="unit_sub_unit", Storage="_unit", ThisKey="unit_ref", OtherKey="id", IsForeignKey=true)]
	public unit unit
	{
		get
		{
			return this._unit.Entity;
		}
		set
		{
			unit previousValue = this._unit.Entity;
			if (((previousValue != value) 
						|| (this._unit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._unit.Entity = null;
					previousValue.sub_units.Remove(this);
				}
				this._unit.Entity = value;
				if ((value != null))
				{
					value.sub_units.Add(this);
					this._unit_ref = value.id;
				}
				else
				{
					this._unit_ref = default(int);
				}
				this.SendPropertyChanged("unit");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_users(user entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit1 = this;
	}
	
	private void detach_users(user entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit1 = null;
	}
	
	private void attach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit = this;
	}
	
	private void detach_tickets(ticket entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit = null;
	}
	
	private void attach_tickets1(ticket entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit1 = this;
	}
	
	private void detach_tickets1(ticket entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit1 = null;
	}
	
	private void attach_tickets2(ticket entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit2 = this;
	}
	
	private void detach_tickets2(ticket entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit2 = null;
	}
	
	private void attach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit = this;
	}
	
	private void detach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.sub_unit = null;
	}
}

[Table(Name="dbo.units")]
public partial class unit : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _unit_name;
	
	private EntitySet<sub_unit> _sub_units;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onunit_nameChanging(string value);
    partial void Onunit_nameChanged();
    #endregion
	
	public unit()
	{
		this._sub_units = new EntitySet<sub_unit>(new Action<sub_unit>(this.attach_sub_units), new Action<sub_unit>(this.detach_sub_units));
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_unit_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string unit_name
	{
		get
		{
			return this._unit_name;
		}
		set
		{
			if ((this._unit_name != value))
			{
				this.Onunit_nameChanging(value);
				this.SendPropertyChanging();
				this._unit_name = value;
				this.SendPropertyChanged("unit_name");
				this.Onunit_nameChanged();
			}
		}
	}
	
	[Association(Name="unit_sub_unit", Storage="_sub_units", ThisKey="id", OtherKey="unit_ref")]
	public EntitySet<sub_unit> sub_units
	{
		get
		{
			return this._sub_units;
		}
		set
		{
			this._sub_units.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_sub_units(sub_unit entity)
	{
		this.SendPropertyChanging();
		entity.unit = this;
	}
	
	private void detach_sub_units(sub_unit entity)
	{
		this.SendPropertyChanging();
		entity.unit = null;
	}
}

[Table(Name="dbo.user_groups")]
public partial class user_group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _ad_group;
	
	private int _security_level;
	
	private EntityRef<security_level> _security_level1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onad_groupChanging(string value);
    partial void Onad_groupChanged();
    partial void Onsecurity_levelChanging(int value);
    partial void Onsecurity_levelChanged();
    #endregion
	
	public user_group()
	{
		this._security_level1 = default(EntityRef<security_level>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_ad_group", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string ad_group
	{
		get
		{
			return this._ad_group;
		}
		set
		{
			if ((this._ad_group != value))
			{
				this.Onad_groupChanging(value);
				this.SendPropertyChanging();
				this._ad_group = value;
				this.SendPropertyChanged("ad_group");
				this.Onad_groupChanged();
			}
		}
	}
	
	[Column(Storage="_security_level", DbType="Int NOT NULL")]
	public int security_level
	{
		get
		{
			return this._security_level;
		}
		set
		{
			if ((this._security_level != value))
			{
				if (this._security_level1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onsecurity_levelChanging(value);
				this.SendPropertyChanging();
				this._security_level = value;
				this.SendPropertyChanged("security_level");
				this.Onsecurity_levelChanged();
			}
		}
	}
	
	[Association(Name="security_level_user_group", Storage="_security_level1", ThisKey="security_level", OtherKey="id", IsForeignKey=true)]
	public security_level security_level1
	{
		get
		{
			return this._security_level1.Entity;
		}
		set
		{
			security_level previousValue = this._security_level1.Entity;
			if (((previousValue != value) 
						|| (this._security_level1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._security_level1.Entity = null;
					previousValue.user_groups.Remove(this);
				}
				this._security_level1.Entity = value;
				if ((value != null))
				{
					value.user_groups.Add(this);
					this._security_level = value.id;
				}
				else
				{
					this._security_level = default(int);
				}
				this.SendPropertyChanged("security_level1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.tickets")]
public partial class ticket : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _title;
	
	private string _details;
	
	private int _submitter;
	
	private System.DateTime _submitted;
	
	private System.DateTime _last_action;
	
	private System.DateTime _closed;
	
	private int _assigned_to_group;
	
	private System.Nullable<int> _assigned_to_group_last;
	
	private int _ticket_status;
	
	private int _priority;
	
	private int _originating_group;
	
	private bool _active;
	
	private EntitySet<comment> _comments;
	
	private EntitySet<attachment> _attachments;
	
	private EntityRef<sub_unit> _sub_unit;
	
	private EntityRef<sub_unit> _sub_unit1;
	
	private EntityRef<sub_unit> _sub_unit2;
	
	private EntityRef<priority> _priority1;
	
	private EntityRef<user> _user;
	
	private EntityRef<statuse> _statuse;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndetailsChanging(string value);
    partial void OndetailsChanged();
    partial void OnsubmitterChanging(int value);
    partial void OnsubmitterChanged();
    partial void OnsubmittedChanging(System.DateTime value);
    partial void OnsubmittedChanged();
    partial void Onlast_actionChanging(System.DateTime value);
    partial void Onlast_actionChanged();
    partial void OnclosedChanging(System.DateTime value);
    partial void OnclosedChanged();
    partial void Onassigned_to_groupChanging(int value);
    partial void Onassigned_to_groupChanged();
    partial void Onassigned_to_group_lastChanging(System.Nullable<int> value);
    partial void Onassigned_to_group_lastChanged();
    partial void Onticket_statusChanging(int value);
    partial void Onticket_statusChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    partial void Onoriginating_groupChanging(int value);
    partial void Onoriginating_groupChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
	
	public ticket()
	{
		this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
		this._attachments = new EntitySet<attachment>(new Action<attachment>(this.attach_attachments), new Action<attachment>(this.detach_attachments));
		this._sub_unit = default(EntityRef<sub_unit>);
		this._sub_unit1 = default(EntityRef<sub_unit>);
		this._sub_unit2 = default(EntityRef<sub_unit>);
		this._priority1 = default(EntityRef<priority>);
		this._user = default(EntityRef<user>);
		this._statuse = default(EntityRef<statuse>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_details", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string details
	{
		get
		{
			return this._details;
		}
		set
		{
			if ((this._details != value))
			{
				this.OndetailsChanging(value);
				this.SendPropertyChanging();
				this._details = value;
				this.SendPropertyChanged("details");
				this.OndetailsChanged();
			}
		}
	}
	
	[Column(Storage="_submitter", DbType="Int NOT NULL")]
	public int submitter
	{
		get
		{
			return this._submitter;
		}
		set
		{
			if ((this._submitter != value))
			{
				if (this._user.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnsubmitterChanging(value);
				this.SendPropertyChanging();
				this._submitter = value;
				this.SendPropertyChanged("submitter");
				this.OnsubmitterChanged();
			}
		}
	}
	
	[Column(Storage="_submitted", DbType="DateTime NOT NULL")]
	public System.DateTime submitted
	{
		get
		{
			return this._submitted;
		}
		set
		{
			if ((this._submitted != value))
			{
				this.OnsubmittedChanging(value);
				this.SendPropertyChanging();
				this._submitted = value;
				this.SendPropertyChanged("submitted");
				this.OnsubmittedChanged();
			}
		}
	}
	
	[Column(Storage="_last_action", DbType="DateTime NOT NULL")]
	public System.DateTime last_action
	{
		get
		{
			return this._last_action;
		}
		set
		{
			if ((this._last_action != value))
			{
				this.Onlast_actionChanging(value);
				this.SendPropertyChanging();
				this._last_action = value;
				this.SendPropertyChanged("last_action");
				this.Onlast_actionChanged();
			}
		}
	}
	
	[Column(Storage="_closed", DbType="DateTime NOT NULL")]
	public System.DateTime closed
	{
		get
		{
			return this._closed;
		}
		set
		{
			if ((this._closed != value))
			{
				this.OnclosedChanging(value);
				this.SendPropertyChanging();
				this._closed = value;
				this.SendPropertyChanged("closed");
				this.OnclosedChanged();
			}
		}
	}
	
	[Column(Storage="_assigned_to_group", DbType="Int NOT NULL")]
	public int assigned_to_group
	{
		get
		{
			return this._assigned_to_group;
		}
		set
		{
			if ((this._assigned_to_group != value))
			{
				if (this._sub_unit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onassigned_to_groupChanging(value);
				this.SendPropertyChanging();
				this._assigned_to_group = value;
				this.SendPropertyChanged("assigned_to_group");
				this.Onassigned_to_groupChanged();
			}
		}
	}
	
	[Column(Storage="_assigned_to_group_last", DbType="Int")]
	public System.Nullable<int> assigned_to_group_last
	{
		get
		{
			return this._assigned_to_group_last;
		}
		set
		{
			if ((this._assigned_to_group_last != value))
			{
				if (this._sub_unit1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onassigned_to_group_lastChanging(value);
				this.SendPropertyChanging();
				this._assigned_to_group_last = value;
				this.SendPropertyChanged("assigned_to_group_last");
				this.Onassigned_to_group_lastChanged();
			}
		}
	}
	
	[Column(Storage="_ticket_status", DbType="Int NOT NULL")]
	public int ticket_status
	{
		get
		{
			return this._ticket_status;
		}
		set
		{
			if ((this._ticket_status != value))
			{
				if (this._statuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onticket_statusChanging(value);
				this.SendPropertyChanging();
				this._ticket_status = value;
				this.SendPropertyChanged("ticket_status");
				this.Onticket_statusChanged();
			}
		}
	}
	
	[Column(Storage="_priority", DbType="Int NOT NULL")]
	public int priority
	{
		get
		{
			return this._priority;
		}
		set
		{
			if ((this._priority != value))
			{
				if (this._priority1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnpriorityChanging(value);
				this.SendPropertyChanging();
				this._priority = value;
				this.SendPropertyChanged("priority");
				this.OnpriorityChanged();
			}
		}
	}
	
	[Column(Storage="_originating_group", DbType="Int NOT NULL")]
	public int originating_group
	{
		get
		{
			return this._originating_group;
		}
		set
		{
			if ((this._originating_group != value))
			{
				if (this._sub_unit2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onoriginating_groupChanging(value);
				this.SendPropertyChanging();
				this._originating_group = value;
				this.SendPropertyChanged("originating_group");
				this.Onoriginating_groupChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="Bit NOT NULL")]
	public bool active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Association(Name="ticket_comment", Storage="_comments", ThisKey="id", OtherKey="ticket_ref")]
	public EntitySet<comment> comments
	{
		get
		{
			return this._comments;
		}
		set
		{
			this._comments.Assign(value);
		}
	}
	
	[Association(Name="ticket_attachment", Storage="_attachments", ThisKey="id", OtherKey="ticket_ref")]
	public EntitySet<attachment> attachments
	{
		get
		{
			return this._attachments;
		}
		set
		{
			this._attachments.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_ticket", Storage="_sub_unit", ThisKey="assigned_to_group", OtherKey="id", IsForeignKey=true)]
	public sub_unit sub_unit
	{
		get
		{
			return this._sub_unit.Entity;
		}
		set
		{
			sub_unit previousValue = this._sub_unit.Entity;
			if (((previousValue != value) 
						|| (this._sub_unit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._sub_unit.Entity = null;
					previousValue.tickets.Remove(this);
				}
				this._sub_unit.Entity = value;
				if ((value != null))
				{
					value.tickets.Add(this);
					this._assigned_to_group = value.id;
				}
				else
				{
					this._assigned_to_group = default(int);
				}
				this.SendPropertyChanged("sub_unit");
			}
		}
	}
	
	[Association(Name="sub_unit_ticket1", Storage="_sub_unit1", ThisKey="assigned_to_group_last", OtherKey="id", IsForeignKey=true)]
	public sub_unit sub_unit1
	{
		get
		{
			return this._sub_unit1.Entity;
		}
		set
		{
			sub_unit previousValue = this._sub_unit1.Entity;
			if (((previousValue != value) 
						|| (this._sub_unit1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._sub_unit1.Entity = null;
					previousValue.tickets1.Remove(this);
				}
				this._sub_unit1.Entity = value;
				if ((value != null))
				{
					value.tickets1.Add(this);
					this._assigned_to_group_last = value.id;
				}
				else
				{
					this._assigned_to_group_last = default(Nullable<int>);
				}
				this.SendPropertyChanged("sub_unit1");
			}
		}
	}
	
	[Association(Name="sub_unit_ticket2", Storage="_sub_unit2", ThisKey="originating_group", OtherKey="id", IsForeignKey=true)]
	public sub_unit sub_unit2
	{
		get
		{
			return this._sub_unit2.Entity;
		}
		set
		{
			sub_unit previousValue = this._sub_unit2.Entity;
			if (((previousValue != value) 
						|| (this._sub_unit2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._sub_unit2.Entity = null;
					previousValue.tickets2.Remove(this);
				}
				this._sub_unit2.Entity = value;
				if ((value != null))
				{
					value.tickets2.Add(this);
					this._originating_group = value.id;
				}
				else
				{
					this._originating_group = default(int);
				}
				this.SendPropertyChanged("sub_unit2");
			}
		}
	}
	
	[Association(Name="priority_ticket", Storage="_priority1", ThisKey="priority", OtherKey="id", IsForeignKey=true)]
	public priority priority1
	{
		get
		{
			return this._priority1.Entity;
		}
		set
		{
			priority previousValue = this._priority1.Entity;
			if (((previousValue != value) 
						|| (this._priority1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._priority1.Entity = null;
					previousValue.tickets.Remove(this);
				}
				this._priority1.Entity = value;
				if ((value != null))
				{
					value.tickets.Add(this);
					this._priority = value.id;
				}
				else
				{
					this._priority = default(int);
				}
				this.SendPropertyChanged("priority1");
			}
		}
	}
	
	[Association(Name="user_ticket", Storage="_user", ThisKey="submitter", OtherKey="id", IsForeignKey=true)]
	public user user
	{
		get
		{
			return this._user.Entity;
		}
		set
		{
			user previousValue = this._user.Entity;
			if (((previousValue != value) 
						|| (this._user.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user.Entity = null;
					previousValue.tickets.Remove(this);
				}
				this._user.Entity = value;
				if ((value != null))
				{
					value.tickets.Add(this);
					this._submitter = value.id;
				}
				else
				{
					this._submitter = default(int);
				}
				this.SendPropertyChanged("user");
			}
		}
	}
	
	[Association(Name="statuse_ticket", Storage="_statuse", ThisKey="ticket_status", OtherKey="id", IsForeignKey=true)]
	public statuse statuse
	{
		get
		{
			return this._statuse.Entity;
		}
		set
		{
			statuse previousValue = this._statuse.Entity;
			if (((previousValue != value) 
						|| (this._statuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._statuse.Entity = null;
					previousValue.tickets.Remove(this);
				}
				this._statuse.Entity = value;
				if ((value != null))
				{
					value.tickets.Add(this);
					this._ticket_status = value.id;
				}
				else
				{
					this._ticket_status = default(int);
				}
				this.SendPropertyChanged("statuse");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.ticket = this;
	}
	
	private void detach_comments(comment entity)
	{
		this.SendPropertyChanging();
		entity.ticket = null;
	}
	
	private void attach_attachments(attachment entity)
	{
		this.SendPropertyChanging();
		entity.ticket = this;
	}
	
	private void detach_attachments(attachment entity)
	{
		this.SendPropertyChanging();
		entity.ticket = null;
	}
}

[Table(Name="dbo.comments")]
public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _comment1;
	
	private int _ticket_ref;
	
	private int _submitter;
	
	private System.DateTime _submitted;
	
	private int _assigned_to;
	
	private int _priority_id;
	
	private int _status_id;
	
	private bool _active;
	
	private EntitySet<attachment> _attachments;
	
	private EntityRef<sub_unit> _sub_unit;
	
	private EntityRef<priority> _priority;
	
	private EntityRef<statuse> _statuse;
	
	private EntityRef<user> _user;
	
	private EntityRef<ticket> _ticket;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncomment1Changing(string value);
    partial void Oncomment1Changed();
    partial void Onticket_refChanging(int value);
    partial void Onticket_refChanged();
    partial void OnsubmitterChanging(int value);
    partial void OnsubmitterChanged();
    partial void OnsubmittedChanging(System.DateTime value);
    partial void OnsubmittedChanged();
    partial void Onassigned_toChanging(int value);
    partial void Onassigned_toChanged();
    partial void Onpriority_idChanging(int value);
    partial void Onpriority_idChanged();
    partial void Onstatus_idChanging(int value);
    partial void Onstatus_idChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
	
	public comment()
	{
		this._attachments = new EntitySet<attachment>(new Action<attachment>(this.attach_attachments), new Action<attachment>(this.detach_attachments));
		this._sub_unit = default(EntityRef<sub_unit>);
		this._priority = default(EntityRef<priority>);
		this._statuse = default(EntityRef<statuse>);
		this._user = default(EntityRef<user>);
		this._ticket = default(EntityRef<ticket>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Name="comment", Storage="_comment1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string comment1
	{
		get
		{
			return this._comment1;
		}
		set
		{
			if ((this._comment1 != value))
			{
				this.Oncomment1Changing(value);
				this.SendPropertyChanging();
				this._comment1 = value;
				this.SendPropertyChanged("comment1");
				this.Oncomment1Changed();
			}
		}
	}
	
	[Column(Storage="_ticket_ref", DbType="Int NOT NULL")]
	public int ticket_ref
	{
		get
		{
			return this._ticket_ref;
		}
		set
		{
			if ((this._ticket_ref != value))
			{
				if (this._ticket.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onticket_refChanging(value);
				this.SendPropertyChanging();
				this._ticket_ref = value;
				this.SendPropertyChanged("ticket_ref");
				this.Onticket_refChanged();
			}
		}
	}
	
	[Column(Storage="_submitter", DbType="Int NOT NULL")]
	public int submitter
	{
		get
		{
			return this._submitter;
		}
		set
		{
			if ((this._submitter != value))
			{
				if (this._user.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnsubmitterChanging(value);
				this.SendPropertyChanging();
				this._submitter = value;
				this.SendPropertyChanged("submitter");
				this.OnsubmitterChanged();
			}
		}
	}
	
	[Column(Storage="_submitted", DbType="DateTime NOT NULL")]
	public System.DateTime submitted
	{
		get
		{
			return this._submitted;
		}
		set
		{
			if ((this._submitted != value))
			{
				this.OnsubmittedChanging(value);
				this.SendPropertyChanging();
				this._submitted = value;
				this.SendPropertyChanged("submitted");
				this.OnsubmittedChanged();
			}
		}
	}
	
	[Column(Storage="_assigned_to", DbType="Int NOT NULL")]
	public int assigned_to
	{
		get
		{
			return this._assigned_to;
		}
		set
		{
			if ((this._assigned_to != value))
			{
				if (this._sub_unit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onassigned_toChanging(value);
				this.SendPropertyChanging();
				this._assigned_to = value;
				this.SendPropertyChanged("assigned_to");
				this.Onassigned_toChanged();
			}
		}
	}
	
	[Column(Storage="_priority_id", DbType="Int NOT NULL")]
	public int priority_id
	{
		get
		{
			return this._priority_id;
		}
		set
		{
			if ((this._priority_id != value))
			{
				if (this._priority.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onpriority_idChanging(value);
				this.SendPropertyChanging();
				this._priority_id = value;
				this.SendPropertyChanged("priority_id");
				this.Onpriority_idChanged();
			}
		}
	}
	
	[Column(Storage="_status_id", DbType="Int NOT NULL")]
	public int status_id
	{
		get
		{
			return this._status_id;
		}
		set
		{
			if ((this._status_id != value))
			{
				if (this._statuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onstatus_idChanging(value);
				this.SendPropertyChanging();
				this._status_id = value;
				this.SendPropertyChanged("status_id");
				this.Onstatus_idChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="Bit NOT NULL")]
	public bool active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Association(Name="comment_attachment", Storage="_attachments", ThisKey="id", OtherKey="comment_ref")]
	public EntitySet<attachment> attachments
	{
		get
		{
			return this._attachments;
		}
		set
		{
			this._attachments.Assign(value);
		}
	}
	
	[Association(Name="sub_unit_comment", Storage="_sub_unit", ThisKey="assigned_to", OtherKey="id", IsForeignKey=true)]
	public sub_unit sub_unit
	{
		get
		{
			return this._sub_unit.Entity;
		}
		set
		{
			sub_unit previousValue = this._sub_unit.Entity;
			if (((previousValue != value) 
						|| (this._sub_unit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._sub_unit.Entity = null;
					previousValue.comments.Remove(this);
				}
				this._sub_unit.Entity = value;
				if ((value != null))
				{
					value.comments.Add(this);
					this._assigned_to = value.id;
				}
				else
				{
					this._assigned_to = default(int);
				}
				this.SendPropertyChanged("sub_unit");
			}
		}
	}
	
	[Association(Name="priority_comment", Storage="_priority", ThisKey="priority_id", OtherKey="id", IsForeignKey=true)]
	public priority priority
	{
		get
		{
			return this._priority.Entity;
		}
		set
		{
			priority previousValue = this._priority.Entity;
			if (((previousValue != value) 
						|| (this._priority.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._priority.Entity = null;
					previousValue.comments.Remove(this);
				}
				this._priority.Entity = value;
				if ((value != null))
				{
					value.comments.Add(this);
					this._priority_id = value.id;
				}
				else
				{
					this._priority_id = default(int);
				}
				this.SendPropertyChanged("priority");
			}
		}
	}
	
	[Association(Name="statuse_comment", Storage="_statuse", ThisKey="status_id", OtherKey="id", IsForeignKey=true)]
	public statuse statuse
	{
		get
		{
			return this._statuse.Entity;
		}
		set
		{
			statuse previousValue = this._statuse.Entity;
			if (((previousValue != value) 
						|| (this._statuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._statuse.Entity = null;
					previousValue.comments.Remove(this);
				}
				this._statuse.Entity = value;
				if ((value != null))
				{
					value.comments.Add(this);
					this._status_id = value.id;
				}
				else
				{
					this._status_id = default(int);
				}
				this.SendPropertyChanged("statuse");
			}
		}
	}
	
	[Association(Name="user_comment", Storage="_user", ThisKey="submitter", OtherKey="id", IsForeignKey=true)]
	public user user
	{
		get
		{
			return this._user.Entity;
		}
		set
		{
			user previousValue = this._user.Entity;
			if (((previousValue != value) 
						|| (this._user.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user.Entity = null;
					previousValue.comments.Remove(this);
				}
				this._user.Entity = value;
				if ((value != null))
				{
					value.comments.Add(this);
					this._submitter = value.id;
				}
				else
				{
					this._submitter = default(int);
				}
				this.SendPropertyChanged("user");
			}
		}
	}
	
	[Association(Name="ticket_comment", Storage="_ticket", ThisKey="ticket_ref", OtherKey="id", IsForeignKey=true)]
	public ticket ticket
	{
		get
		{
			return this._ticket.Entity;
		}
		set
		{
			ticket previousValue = this._ticket.Entity;
			if (((previousValue != value) 
						|| (this._ticket.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ticket.Entity = null;
					previousValue.comments.Remove(this);
				}
				this._ticket.Entity = value;
				if ((value != null))
				{
					value.comments.Add(this);
					this._ticket_ref = value.id;
				}
				else
				{
					this._ticket_ref = default(int);
				}
				this.SendPropertyChanged("ticket");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_attachments(attachment entity)
	{
		this.SendPropertyChanging();
		entity.comment = this;
	}
	
	private void detach_attachments(attachment entity)
	{
		this.SendPropertyChanging();
		entity.comment = null;
	}
}

[Table(Name="dbo.attachments")]
public partial class attachment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _ticket_ref;
	
	private System.Nullable<int> _comment_ref;
	
	private string _attachment_name;
	
	private string _attachment_size;
	
	private System.DateTime _submitted;
	
	private bool _active;
	
	private EntityRef<comment> _comment;
	
	private EntityRef<ticket> _ticket;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onticket_refChanging(int value);
    partial void Onticket_refChanged();
    partial void Oncomment_refChanging(System.Nullable<int> value);
    partial void Oncomment_refChanged();
    partial void Onattachment_nameChanging(string value);
    partial void Onattachment_nameChanged();
    partial void Onattachment_sizeChanging(string value);
    partial void Onattachment_sizeChanged();
    partial void OnsubmittedChanging(System.DateTime value);
    partial void OnsubmittedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
	
	public attachment()
	{
		this._comment = default(EntityRef<comment>);
		this._ticket = default(EntityRef<ticket>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_ticket_ref", DbType="Int NOT NULL")]
	public int ticket_ref
	{
		get
		{
			return this._ticket_ref;
		}
		set
		{
			if ((this._ticket_ref != value))
			{
				if (this._ticket.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onticket_refChanging(value);
				this.SendPropertyChanging();
				this._ticket_ref = value;
				this.SendPropertyChanged("ticket_ref");
				this.Onticket_refChanged();
			}
		}
	}
	
	[Column(Storage="_comment_ref", DbType="Int")]
	public System.Nullable<int> comment_ref
	{
		get
		{
			return this._comment_ref;
		}
		set
		{
			if ((this._comment_ref != value))
			{
				if (this._comment.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncomment_refChanging(value);
				this.SendPropertyChanging();
				this._comment_ref = value;
				this.SendPropertyChanged("comment_ref");
				this.Oncomment_refChanged();
			}
		}
	}
	
	[Column(Storage="_attachment_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string attachment_name
	{
		get
		{
			return this._attachment_name;
		}
		set
		{
			if ((this._attachment_name != value))
			{
				this.Onattachment_nameChanging(value);
				this.SendPropertyChanging();
				this._attachment_name = value;
				this.SendPropertyChanged("attachment_name");
				this.Onattachment_nameChanged();
			}
		}
	}
	
	[Column(Storage="_attachment_size", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string attachment_size
	{
		get
		{
			return this._attachment_size;
		}
		set
		{
			if ((this._attachment_size != value))
			{
				this.Onattachment_sizeChanging(value);
				this.SendPropertyChanging();
				this._attachment_size = value;
				this.SendPropertyChanged("attachment_size");
				this.Onattachment_sizeChanged();
			}
		}
	}
	
	[Column(Storage="_submitted", DbType="DateTime NOT NULL")]
	public System.DateTime submitted
	{
		get
		{
			return this._submitted;
		}
		set
		{
			if ((this._submitted != value))
			{
				this.OnsubmittedChanging(value);
				this.SendPropertyChanging();
				this._submitted = value;
				this.SendPropertyChanged("submitted");
				this.OnsubmittedChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="Bit NOT NULL")]
	public bool active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Association(Name="comment_attachment", Storage="_comment", ThisKey="comment_ref", OtherKey="id", IsForeignKey=true)]
	public comment comment
	{
		get
		{
			return this._comment.Entity;
		}
		set
		{
			comment previousValue = this._comment.Entity;
			if (((previousValue != value) 
						|| (this._comment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._comment.Entity = null;
					previousValue.attachments.Remove(this);
				}
				this._comment.Entity = value;
				if ((value != null))
				{
					value.attachments.Add(this);
					this._comment_ref = value.id;
				}
				else
				{
					this._comment_ref = default(Nullable<int>);
				}
				this.SendPropertyChanged("comment");
			}
		}
	}
	
	[Association(Name="ticket_attachment", Storage="_ticket", ThisKey="ticket_ref", OtherKey="id", IsForeignKey=true)]
	public ticket ticket
	{
		get
		{
			return this._ticket.Entity;
		}
		set
		{
			ticket previousValue = this._ticket.Entity;
			if (((previousValue != value) 
						|| (this._ticket.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ticket.Entity = null;
					previousValue.attachments.Remove(this);
				}
				this._ticket.Entity = value;
				if ((value != null))
				{
					value.attachments.Add(this);
					this._ticket_ref = value.id;
				}
				else
				{
					this._ticket_ref = default(int);
				}
				this.SendPropertyChanged("ticket");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
